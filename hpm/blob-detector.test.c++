#include <numeric>
#include <vector>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wsign-conversion"
#include <opencv2/calib3d.hpp>
#include <opencv2/core.hpp>
#pragma GCC diagnostic pop

#include <boost/ut.hpp> //import boost.ut;

#include <hpm/blob-detector.h++>

auto main() -> int {
  using namespace boost::ut;
  // clang-format off
  cv::Mat const openScadCamParams6x = (cv::Mat_<double>(3, 3) << 6 * 3375.85,        0.00, 6 * 1280.0,
                                                                        0.00, 6 * 3375.85, 6 *  671.5,
                                                                        0.00,        0.00,        1.0);
  // clang-format on
  double constexpr knownMarkerDiameter{32.0};
  auto interpret6xOpenScad =
      [&openScadCamParams6x](std::vector<cv::KeyPoint> const &detectedBlobs) {
        auto const cameraMatrix = openScadCamParams6x;
        double const meanFocalLength{std::midpoint(
            cameraMatrix.at<double>(0, 0), cameraMatrix.at<double>(1, 1))};
        cv::Point2f const imageCenter{
            static_cast<float>(cameraMatrix.at<double>(0, 2)),
            static_cast<float>(cameraMatrix.at<double>(1, 2))};
        std::vector<CameraFramedPosition> const knownPositions{
            {700, 300, 2000},   {600, 300, 2000},   {500, 300, 2000},
            {400, 300, 2000},   {300, 300, 2000},   {200, 300, 2000},
            {100, 300, 2000},   {0, 300, 2000},     {-100, 300, 2000},
            {-200, 300, 2000},  {-300, 300, 2000},  {-400, 300, 2000},
            {-500, 300, 2000},  {-600, 300, 2000},  {-700, 300, 2000},
            {700, 200, 2000},   {600, 200, 2000},   {500, 200, 2000},
            {400, 200, 2000},   {300, 200, 2000},   {200, 200, 2000},
            {100, 200, 2000},   {0, 200, 2000},     {-100, 200, 2000},
            {-200, 200, 2000},  {-300, 200, 2000},  {-400, 200, 2000},
            {-500, 200, 2000},  {-600, 200, 2000},  {-700, 200, 2000},
            {700, 100, 2000},   {600, 100, 2000},   {500, 100, 2000},
            {400, 100, 2000},   {300, 100, 2000},   {200, 100, 2000},
            {100, 100, 2000},   {0, 100, 2000},     {-100, 100, 2000},
            {-200, 100, 2000},  {-300, 100, 2000},  {-400, 100, 2000},
            {-500, 100, 2000},  {-600, 100, 2000},  {-700, 100, 2000},
            {700, 0, 2000},     {600, 0, 2000},     {500, 0, 2000},
            {400, 0, 2000},     {300, 0, 2000},     {200, 0, 2000},
            {100, 0, 2000},     {0, 0, 2000},       {-100, 0, 2000},
            {-200, 0, 2000},    {-300, 0, 2000},    {-400, 0, 2000},
            {-500, 0, 2000},    {-600, 0, 2000},    {-700, 0, 2000},
            {700, -100, 2000},  {600, -100, 2000},  {500, -100, 2000},
            {400, -100, 2000},  {300, -100, 2000},  {200, -100, 2000},
            {100, -100, 2000},  {0, -100, 2000},    {-100, -100, 2000},
            {-200, -100, 2000}, {-300, -100, 2000}, {-400, -100, 2000},
            {-500, -100, 2000}, {-600, -100, 2000}, {-700, -100, 2000},
            {700, -200, 2000},  {600, -200, 2000},  {500, -200, 2000},
            {400, -200, 2000},  {300, -200, 2000},  {200, -200, 2000},
            {100, -200, 2000},  {0, -200, 2000},    {-100, -200, 2000},
            {-200, -200, 2000}, {-300, -200, 2000}, {-400, -200, 2000},
            {-500, -200, 2000}, {-600, -200, 2000}, {-700, -200, 2000},
            {700, -300, 2000},  {600, -300, 2000},  {500, -300, 2000},
            {400, -300, 2000},  {300, -300, 2000},  {200, -300, 2000},
            {100, -300, 2000},  {0, -300, 2000},    {-100, -300, 2000},
            {-200, -300, 2000}, {-300, -300, 2000}, {-400, -300, 2000},
            {-500, -300, 2000}, {-600, -300, 2000}, {-700, -300, 2000}};
        auto const positions =
            detectedBlobs |
            std::views::transform([&](cv::KeyPoint const &blob) {
              return blobToPosition(blob, meanFocalLength, imageCenter,
                                    knownMarkerDiameter);
            });

        auto constexpr EPS_JUMBO{3.0_d};
        auto constexpr EPS_PERFECT{1.0_d};
        auto jumbos{0};
        auto perfects{0};
        for (auto i{0}; i < std::ssize(positions); ++i) {
          auto const iu{static_cast<size_t>(i)};
          if (cv::norm(positions[i] - knownPositions[iu]) > EPS_JUMBO) {
            jumbos = jumbos + 1;
          }
          if (cv::norm(positions[i] - knownPositions[iu]) < EPS_PERFECT) {
            perfects = perfects + 1;
          }
        }

        // Allow a maximum fraction of jumbos
        auto percentJumbos{static_cast<double>(jumbos) /
                           static_cast<double>(std::ssize(positions))};
        auto constexpr ALLOWED_JUMBOS_FRACTION{0.03_d};
        expect(percentJumbos < ALLOWED_JUMBOS_FRACTION) << "Too many jumbos";
        if (not(percentJumbos < ALLOWED_JUMBOS_FRACTION)) {
          for (auto i{0}; i < std::ssize(positions); ++i) {
            auto const iu{static_cast<size_t>(i)};
            assert(iu < knownPositions.size());
            expect(cv::norm(positions[i] - knownPositions[iu]) < EPS_JUMBO)
                << positions[i];
            expect(abs(positions[i].x - knownPositions[iu].x) < EPS_JUMBO)
                << positions[i] << knownPositions[iu] << " x too"
                << ((positions[i].x - knownPositions[iu].x) > 0.0 ? "large"
                                                                  : "small");
            expect(abs(positions[i].y - knownPositions[iu].y) < EPS_JUMBO)
                << positions[i] << knownPositions[iu] << " y too"
                << ((positions[i].y - knownPositions[iu].y) > 0.0 ? "large"
                                                                  : "small");
            expect(abs(positions[i].z - knownPositions[iu].z) < EPS_JUMBO)
                << positions[i] << knownPositions[iu] << " z too"
                << ((positions[i].z - knownPositions[iu].z) > 0.0 ? "large"
                                                                  : "small");
          }
        }

        // Require some fraction of perfects
        auto percentPerfects{static_cast<double>(perfects) /
                             static_cast<double>(std::ssize(positions))};
        auto constexpr EXPECTED_PERFECTS_FRACTION{0.76_d};
        expect(percentPerfects >= EXPECTED_PERFECTS_FRACTION)
            << "Not enough perfects";
        if (not(percentPerfects >= EXPECTED_PERFECTS_FRACTION)) {
          for (auto i{0}; i < std::ssize(positions); ++i) {
            auto const iu{static_cast<size_t>(i)};
            assert(iu < knownPositions.size());
            expect(cv::norm(positions[i] - knownPositions[iu]) < EPS_PERFECT)
                << positions[i];
            expect(abs(positions[i].x - knownPositions[iu].x) < EPS_PERFECT)
                << positions[i] << knownPositions[iu] << " x too"
                << ((positions[i].x - knownPositions[iu].x) > 0.0 ? "large"
                                                                  : "small");
            expect(abs(positions[i].y - knownPositions[iu].y) < EPS_PERFECT)
                << positions[i] << knownPositions[iu] << " y too"
                << ((positions[i].y - knownPositions[iu].y) > 0.0 ? "large"
                                                                  : "small");
            expect(abs(positions[i].z - knownPositions[iu].z) < EPS_PERFECT)
                << positions[i] << knownPositions[iu] << " z too"
                << ((positions[i].z - knownPositions[iu].z) > 0.0 ? "large"
                                                                  : "small");
          }
        }
      };

  std::vector<cv::KeyPoint> const detectedRedBlobs{
      {{14769.3F, 7066.97F}, 335.594F}, {{13756.4F, 7066.96F}, 333.101F},
      {{12743.6F, 7066.98F}, 330.987F}, {{11730.8F, 7066.99F}, 329.263F},
      {{10718.0F, 7066.96F}, 328.151F}, {{9705.1F, 7066.96F}, 326.976F},
      {{8692.33F, 7066.97F}, 326.154F}, {{7679.51F, 7066.98F}, 326.054F},
      {{6666.69F, 7066.95F}, 326.215F}, {{5653.84F, 7066.97F}, 326.878F},
      {{4641.02F, 7066.98F}, 328.159F}, {{3628.18F, 7066.96F}, 329.301F},
      {{2615.4F, 7066.98F}, 330.733F},  {{1602.57F, 7066.97F}, 332.916F},
      {{589.769F, 7066.98F}, 335.57F},  {{14769.3F, 6054.14F}, 334.173F},
      {{13756.4F, 6054.13F}, 331.827F}, {{12743.6F, 6054.12F}, 329.795F},
      {{11730.8F, 6054.13F}, 328.249F}, {{10718.0F, 6054.11F}, 327.024F},
      {{9705.12F, 6054.12F}, 326.039F}, {{8692.35F, 6054.15F}, 325.224F},
      {{7679.5F, 6054.15F}, 324.948F},  {{6666.66F, 6054.16F}, 325.227F},
      {{5653.86F, 6054.12F}, 325.895F}, {{4641.02F, 6054.13F}, 327.016F},
      {{3628.21F, 6054.13F}, 328.311F}, {{2615.39F, 6054.13F}, 329.947F},
      {{1602.58F, 6054.14F}, 332.077F}, {{589.748F, 6054.13F}, 334.238F},
      {{14769.3F, 5041.33F}, 333.348F}, {{13756.4F, 5041.32F}, 331.103F},
      {{12743.6F, 5041.33F}, 329.108F}, {{11730.8F, 5041.29F}, 327.573F},
      {{10718.0F, 5041.31F}, 326.161F}, {{9705.15F, 5041.34F}, 325.233F},
      {{8692.32F, 5041.32F}, 324.64F},  {{7679.5F, 5041.31F}, 324.428F},
      {{6666.69F, 5041.32F}, 324.612F}, {{5653.82F, 5041.34F}, 325.181F},
      {{4641.06F, 5041.31F}, 326.15F},  {{3628.19F, 5041.34F}, 327.62F},
      {{2615.38F, 5041.33F}, 329.217F}, {{1602.56F, 5041.31F}, 331.397F},
      {{589.757F, 5041.32F}, 333.604F}, {{14769.3F, 4028.5F}, 333.433F},
      {{13756.4F, 4028.5F}, 331.048F},  {{12743.6F, 4028.5F}, 328.428F},
      {{11730.8F, 4028.5F}, 327.342F},  {{10718.0F, 4028.5F}, 326.009F},
      {{9705.17F, 4028.5F}, 324.975F},  {{8692.29F, 4028.5F}, 324.428F},
      {{7679.5F, 4028.5F}, 324.306F},   {{6666.67F, 4028.5F}, 324.424F},
      {{5653.82F, 4028.5F}, 324.978F},  {{4641.05F, 4028.5F}, 326.063F},
      {{3628.2F, 4028.5F}, 327.157F},   {{2615.36F, 4028.5F}, 328.975F},
      {{1602.56F, 4028.5F}, 331.031F},  {{589.742F, 4028.5F}, 333.435F},
      {{14769.3F, 3015.67F}, 333.348F}, {{13756.4F, 3015.68F}, 331.103F},
      {{12743.6F, 3015.67F}, 329.108F}, {{11730.8F, 3015.71F}, 327.573F},
      {{10718.0F, 3015.69F}, 326.161F}, {{9705.15F, 3015.66F}, 325.233F},
      {{8692.32F, 3015.68F}, 324.64F},  {{7679.5F, 3015.69F}, 324.428F},
      {{6666.69F, 3015.68F}, 324.612F}, {{5653.82F, 3015.66F}, 325.181F},
      {{4641.06F, 3015.69F}, 326.15F},  {{3628.19F, 3015.66F}, 327.62F},
      {{2615.38F, 3015.67F}, 329.217F}, {{1602.56F, 3015.69F}, 331.397F},
      {{589.757F, 3015.68F}, 333.604F}, {{14769.3F, 2002.86F}, 334.173F},
      {{13756.4F, 2002.87F}, 331.827F}, {{12743.6F, 2002.88F}, 329.793F},
      {{11730.8F, 2002.87F}, 328.249F}, {{10718.0F, 2002.89F}, 327.024F},
      {{9705.12F, 2002.88F}, 326.039F}, {{8692.35F, 2002.85F}, 325.224F},
      {{7679.5F, 2002.85F}, 324.948F},  {{6666.66F, 2002.84F}, 325.227F},
      {{5653.86F, 2002.88F}, 325.895F}, {{4641.02F, 2002.87F}, 327.016F},
      {{3628.21F, 2002.87F}, 328.311F}, {{2615.39F, 2002.87F}, 329.947F},
      {{1602.58F, 2002.86F}, 332.077F}, {{589.748F, 2002.87F}, 334.238F},
      {{14769.3F, 990.028F}, 335.594F}, {{13756.4F, 990.037F}, 333.1F},
      {{12743.6F, 990.028F}, 330.991F}, {{11730.8F, 990.012F}, 329.264F},
      {{10718.0F, 990.04F}, 328.151F},  {{9705.1F, 990.041F}, 326.976F},
      {{8692.33F, 990.029F}, 326.159F}, {{7679.51F, 990.026F}, 326.053F},
      {{6666.69F, 990.046F}, 326.215F}, {{5653.84F, 990.034F}, 326.878F},
      {{4641.02F, 990.023F}, 328.159F}, {{3628.18F, 990.037F}, 329.301F},
      {{2615.39F, 990.025F}, 330.735F}, {{1602.57F, 990.037F}, 332.911F},
      {{589.769F, 990.02F}, 335.57F}};

  std::vector<cv::KeyPoint> const detectedGreenBlobs{
      {{14769.3F, 7066.97F}, 335.594F}, {{13756.4F, 7066.96F}, 333.101F},
      {{12743.6F, 7066.98F}, 330.987F}, {{11730.8F, 7066.99F}, 329.263F},
      {{10718.0F, 7066.96F}, 328.151F}, {{9705.1F, 7066.96F}, 326.976F},
      {{8692.33F, 7066.97F}, 326.154F}, {{7679.51F, 7066.98F}, 326.054F},
      {{6666.69F, 7066.95F}, 326.215F}, {{5653.84F, 7066.97F}, 326.878F},
      {{4641.02F, 7066.98F}, 328.159F}, {{3628.18F, 7066.96F}, 329.301F},
      {{2615.4F, 7066.98F}, 330.733F},  {{1602.57F, 7066.97F}, 332.916F},
      {{589.769F, 7066.98F}, 335.57F},  {{14769.3F, 6054.14F}, 334.173F},
      {{13756.4F, 6054.13F}, 331.827F}, {{12743.6F, 6054.12F}, 329.795F},
      {{11730.8F, 6054.13F}, 328.249F}, {{10718.0F, 6054.11F}, 327.024F},
      {{9705.12F, 6054.12F}, 326.039F}, {{8692.35F, 6054.15F}, 325.224F},
      {{7679.5F, 6054.15F}, 324.948F},  {{6666.66F, 6054.16F}, 325.227F},
      {{5653.86F, 6054.12F}, 325.895F}, {{4641.02F, 6054.13F}, 327.016F},
      {{3628.21F, 6054.13F}, 328.311F}, {{2615.39F, 6054.13F}, 329.947F},
      {{1602.58F, 6054.14F}, 332.077F}, {{589.748F, 6054.13F}, 334.238F},
      {{14769.3F, 5041.33F}, 333.348F}, {{13756.4F, 5041.32F}, 331.103F},
      {{12743.6F, 5041.33F}, 329.108F}, {{11730.8F, 5041.29F}, 327.573F},
      {{10718.0F, 5041.31F}, 326.161F}, {{9705.15F, 5041.34F}, 325.233F},
      {{8692.32F, 5041.32F}, 324.64F},  {{7679.5F, 5041.31F}, 324.428F},
      {{6666.69F, 5041.32F}, 324.612F}, {{5653.82F, 5041.34F}, 325.181F},
      {{4641.06F, 5041.31F}, 326.15F},  {{3628.19F, 5041.34F}, 327.62F},
      {{2615.38F, 5041.33F}, 329.217F}, {{1602.56F, 5041.31F}, 331.397F},
      {{589.757F, 5041.32F}, 333.604F}, {{14769.3F, 4028.5F}, 333.433F},
      {{13756.4F, 4028.5F}, 331.048F},  {{12743.6F, 4028.5F}, 328.428F},
      {{11730.8F, 4028.5F}, 327.342F},  {{10718.0F, 4028.5F}, 326.009F},
      {{9705.17F, 4028.5F}, 324.975F},  {{8692.29F, 4028.5F}, 324.428F},
      {{7679.5F, 4028.5F}, 324.306F},   {{6666.67F, 4028.5F}, 324.424F},
      {{5653.82F, 4028.5F}, 324.978F},  {{4641.05F, 4028.5F}, 326.063F},
      {{3628.2F, 4028.5F}, 327.157F},   {{2615.36F, 4028.5F}, 328.975F},
      {{1602.56F, 4028.5F}, 331.031F},  {{589.742F, 4028.5F}, 333.435F},
      {{14769.3F, 3015.67F}, 333.348F}, {{13756.4F, 3015.68F}, 331.103F},
      {{12743.6F, 3015.67F}, 329.108F}, {{11730.8F, 3015.71F}, 327.573F},
      {{10718.0F, 3015.69F}, 326.161F}, {{9705.15F, 3015.66F}, 325.233F},
      {{8692.32F, 3015.68F}, 324.64F},  {{7679.5F, 3015.69F}, 324.428F},
      {{6666.69F, 3015.68F}, 324.612F}, {{5653.82F, 3015.66F}, 325.181F},
      {{4641.06F, 3015.69F}, 326.15F},  {{3628.19F, 3015.66F}, 327.62F},
      {{2615.38F, 3015.67F}, 329.217F}, {{1602.56F, 3015.69F}, 331.397F},
      {{589.757F, 3015.68F}, 333.604F}, {{14769.3F, 2002.86F}, 334.173F},
      {{13756.4F, 2002.87F}, 331.827F}, {{12743.6F, 2002.88F}, 329.793F},
      {{11730.8F, 2002.87F}, 328.249F}, {{10718.0F, 2002.89F}, 327.024F},
      {{9705.12F, 2002.88F}, 326.039F}, {{8692.35F, 2002.85F}, 325.224F},
      {{7679.5F, 2002.85F}, 324.948F},  {{6666.66F, 2002.84F}, 325.227F},
      {{5653.86F, 2002.88F}, 325.895F}, {{4641.02F, 2002.87F}, 327.016F},
      {{3628.21F, 2002.87F}, 328.311F}, {{2615.39F, 2002.87F}, 329.947F},
      {{1602.58F, 2002.86F}, 332.077F}, {{589.748F, 2002.87F}, 334.238F},
      {{14769.3F, 990.028F}, 335.594F}, {{13756.4F, 990.037F}, 333.1F},
      {{12743.6F, 990.028F}, 330.991F}, {{11730.8F, 990.012F}, 329.264F},
      {{10718.0F, 990.04F}, 328.151F},  {{9705.1F, 990.041F}, 326.976F},
      {{8692.33F, 990.029F}, 326.159F}, {{7679.51F, 990.026F}, 326.053F},
      {{6666.69F, 990.046F}, 326.215F}, {{5653.84F, 990.034F}, 326.878F},
      {{4641.02F, 990.023F}, 328.159F}, {{3628.18F, 990.037F}, 329.301F},
      {{2615.39F, 990.025F}, 330.735F}, {{1602.57F, 990.037F}, 332.911F},
      {{589.769F, 990.02F}, 335.57F}};
  std::vector<cv::KeyPoint> const detectedBlueBlobs{
      {{14769.3F, 7066.97F}, 335.594F}, {{13756.4F, 7066.96F}, 333.101F},
      {{12743.6F, 7066.98F}, 330.987F}, {{11730.8F, 7066.99F}, 329.263F},
      {{10718.0F, 7066.96F}, 328.151F}, {{9705.1F, 7066.96F}, 326.976F},
      {{8692.33F, 7066.97F}, 326.154F}, {{7679.51F, 7066.98F}, 326.054F},
      {{6666.69F, 7066.95F}, 326.215F}, {{5653.84F, 7066.97F}, 326.878F},
      {{4641.02F, 7066.98F}, 328.159F}, {{3628.18F, 7066.96F}, 329.301F},
      {{2615.4F, 7066.98F}, 330.733F},  {{1602.57F, 7066.97F}, 332.916F},
      {{589.769F, 7066.98F}, 335.57F},  {{14769.3F, 6054.14F}, 334.173F},
      {{13756.4F, 6054.13F}, 331.827F}, {{12743.6F, 6054.12F}, 329.795F},
      {{11730.8F, 6054.13F}, 328.249F}, {{10718.0F, 6054.11F}, 327.024F},
      {{9705.12F, 6054.12F}, 326.039F}, {{8692.35F, 6054.15F}, 325.224F},
      {{7679.5F, 6054.15F}, 324.948F},  {{6666.66F, 6054.16F}, 325.227F},
      {{5653.86F, 6054.12F}, 325.895F}, {{4641.02F, 6054.13F}, 327.016F},
      {{3628.21F, 6054.13F}, 328.311F}, {{2615.39F, 6054.13F}, 329.947F},
      {{1602.58F, 6054.14F}, 332.077F}, {{589.748F, 6054.13F}, 334.238F},
      {{14769.3F, 5041.33F}, 333.348F}, {{13756.4F, 5041.32F}, 331.103F},
      {{12743.6F, 5041.33F}, 329.108F}, {{11730.8F, 5041.29F}, 327.573F},
      {{10718.0F, 5041.31F}, 326.161F}, {{9705.15F, 5041.34F}, 325.233F},
      {{8692.32F, 5041.32F}, 324.64F},  {{7679.5F, 5041.31F}, 324.428F},
      {{6666.69F, 5041.32F}, 324.612F}, {{5653.82F, 5041.34F}, 325.181F},
      {{4641.06F, 5041.31F}, 326.15F},  {{3628.19F, 5041.34F}, 327.62F},
      {{2615.38F, 5041.33F}, 329.217F}, {{1602.56F, 5041.31F}, 331.397F},
      {{589.757F, 5041.32F}, 333.604F}, {{14769.3F, 4028.5F}, 333.433F},
      {{13756.4F, 4028.5F}, 331.048F},  {{12743.6F, 4028.5F}, 328.428F},
      {{11730.8F, 4028.5F}, 327.342F},  {{10718.0F, 4028.5F}, 326.009F},
      {{9705.17F, 4028.5F}, 324.975F},  {{8692.29F, 4028.5F}, 324.428F},
      {{7679.5F, 4028.5F}, 324.306F},   {{6666.67F, 4028.5F}, 324.424F},
      {{5653.82F, 4028.5F}, 324.978F},  {{4641.05F, 4028.5F}, 326.063F},
      {{3628.2F, 4028.5F}, 327.157F},   {{2615.36F, 4028.5F}, 328.975F},
      {{1602.56F, 4028.5F}, 331.031F},  {{589.742F, 4028.5F}, 333.435F},
      {{14769.3F, 3015.67F}, 333.348F}, {{13756.4F, 3015.68F}, 331.103F},
      {{12743.6F, 3015.67F}, 329.108F}, {{11730.8F, 3015.71F}, 327.573F},
      {{10718.0F, 3015.69F}, 326.161F}, {{9705.15F, 3015.66F}, 325.233F},
      {{8692.32F, 3015.68F}, 324.64F},  {{7679.5F, 3015.69F}, 324.428F},
      {{6666.69F, 3015.68F}, 324.612F}, {{5653.82F, 3015.66F}, 325.181F},
      {{4641.06F, 3015.69F}, 326.15F},  {{3628.19F, 3015.66F}, 327.62F},
      {{2615.38F, 3015.67F}, 329.217F}, {{1602.56F, 3015.69F}, 331.397F},
      {{589.757F, 3015.68F}, 333.604F}, {{14769.3F, 2002.86F}, 334.173F},
      {{13756.4F, 2002.87F}, 331.827F}, {{12743.6F, 2002.88F}, 329.793F},
      {{11730.8F, 2002.87F}, 328.249F}, {{10718.0F, 2002.89F}, 327.024F},
      {{9705.12F, 2002.88F}, 326.039F}, {{8692.35F, 2002.85F}, 325.224F},
      {{7679.5F, 2002.85F}, 324.948F},  {{6666.66F, 2002.84F}, 325.227F},
      {{5653.86F, 2002.88F}, 325.895F}, {{4641.02F, 2002.87F}, 327.016F},
      {{3628.21F, 2002.87F}, 328.311F}, {{2615.39F, 2002.87F}, 329.947F},
      {{1602.58F, 2002.86F}, 332.077F}, {{589.748F, 2002.87F}, 334.238F},
      {{14769.3F, 990.028F}, 335.594F}, {{13756.4F, 990.037F}, 333.1F},
      {{12743.6F, 990.028F}, 330.991F}, {{11730.8F, 990.012F}, 329.264F},
      {{10718.0F, 990.04F}, 328.151F},  {{9705.1F, 990.041F}, 326.976F},
      {{8692.33F, 990.029F}, 326.159F}, {{7679.51F, 990.026F}, 326.053F},
      {{6666.69F, 990.046F}, 326.215F}, {{5653.84F, 990.034F}, 326.878F},
      {{4641.02F, 990.023F}, 328.159F}, {{3628.18F, 990.037F}, 329.301F},
      {{2615.39F, 990.025F}, 330.735F}, {{1602.57F, 990.037F}, 332.911F},
      {{589.769F, 990.02F}, 335.57F}};

  "interpretation simpleBlobDetector's results on grid-red-2000.png"_test =
      [&interpret6xOpenScad, &detectedRedBlobs] {
        interpret6xOpenScad(detectedRedBlobs);
      };

  "interpretation simpleBlobDetector's results on grid-green-2000.png"_test =
      [&interpret6xOpenScad, &detectedGreenBlobs] {
        interpret6xOpenScad(detectedGreenBlobs);
      };

  "interpretation simpleBlobDetector's results on grid-blue-2000.png"_test =
      [&interpret6xOpenScad, &detectedBlueBlobs] {
        interpret6xOpenScad(detectedBlueBlobs);
      };
}
