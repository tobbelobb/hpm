#include <numeric>
#include <vector>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wsign-conversion"
#if defined(__clang__)
#pragma GCC diagnostic ignored "-Wdeprecated-anon-enum-enum-conversion"
#endif
#include <opencv2/calib3d.hpp>
#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#pragma GCC diagnostic pop

#include <boost/ut.hpp> //import boost.ut;

#include <hpm/blob-detector.h++>
#include <hpm/test-util.h++> // getPath

using namespace hpm;

auto main() -> int {
  using namespace boost::ut;
  // clang-format off
  cv::Mat const openScadCamParams6x = (cv::Mat_<double>(3, 3) << 6 * 3375.85,        0.00, 6 * 1280.0,
                                                                        0.00, 6 * 3375.85, 6 *  671.5,
                                                                        0.00,        0.00,        1.0);
  // clang-format on
  double constexpr knownMarkerDiameter{32.0};
  auto interpret6xOpenScad =
      [&openScadCamParams6x](std::vector<hpm::KeyPoint> const &detectedBlobs) {
        auto const &cameraMatrix = openScadCamParams6x;
        double const meanFocalLength{std::midpoint(
            cameraMatrix.at<double>(0, 0), cameraMatrix.at<double>(1, 1))};
        PixelPosition const imageCenter{cameraMatrix.at<double>(0, 2),
                                        cameraMatrix.at<double>(1, 2)};
        std::vector<CameraFramedPosition> const knownPositions{
            {700, 300, 2000},   {600, 300, 2000},   {500, 300, 2000},
            {400, 300, 2000},   {300, 300, 2000},   {200, 300, 2000},
            {100, 300, 2000},   {0, 300, 2000},     {-100, 300, 2000},
            {-200, 300, 2000},  {-300, 300, 2000},  {-400, 300, 2000},
            {-500, 300, 2000},  {-600, 300, 2000},  {-700, 300, 2000},
            {700, 200, 2000},   {600, 200, 2000},   {500, 200, 2000},
            {400, 200, 2000},   {300, 200, 2000},   {200, 200, 2000},
            {100, 200, 2000},   {0, 200, 2000},     {-100, 200, 2000},
            {-200, 200, 2000},  {-300, 200, 2000},  {-400, 200, 2000},
            {-500, 200, 2000},  {-600, 200, 2000},  {-700, 200, 2000},
            {700, 100, 2000},   {600, 100, 2000},   {500, 100, 2000},
            {400, 100, 2000},   {300, 100, 2000},   {200, 100, 2000},
            {100, 100, 2000},   {0, 100, 2000},     {-100, 100, 2000},
            {-200, 100, 2000},  {-300, 100, 2000},  {-400, 100, 2000},
            {-500, 100, 2000},  {-600, 100, 2000},  {-700, 100, 2000},
            {700, 0, 2000},     {600, 0, 2000},     {500, 0, 2000},
            {400, 0, 2000},     {300, 0, 2000},     {200, 0, 2000},
            {100, 0, 2000},     {0, 0, 2000},       {-100, 0, 2000},
            {-200, 0, 2000},    {-300, 0, 2000},    {-400, 0, 2000},
            {-500, 0, 2000},    {-600, 0, 2000},    {-700, 0, 2000},
            {700, -100, 2000},  {600, -100, 2000},  {500, -100, 2000},
            {400, -100, 2000},  {300, -100, 2000},  {200, -100, 2000},
            {100, -100, 2000},  {0, -100, 2000},    {-100, -100, 2000},
            {-200, -100, 2000}, {-300, -100, 2000}, {-400, -100, 2000},
            {-500, -100, 2000}, {-600, -100, 2000}, {-700, -100, 2000},
            {700, -200, 2000},  {600, -200, 2000},  {500, -200, 2000},
            {400, -200, 2000},  {300, -200, 2000},  {200, -200, 2000},
            {100, -200, 2000},  {0, -200, 2000},    {-100, -200, 2000},
            {-200, -200, 2000}, {-300, -200, 2000}, {-400, -200, 2000},
            {-500, -200, 2000}, {-600, -200, 2000}, {-700, -200, 2000},
            {700, -300, 2000},  {600, -300, 2000},  {500, -300, 2000},
            {400, -300, 2000},  {300, -300, 2000},  {200, -300, 2000},
            {100, -300, 2000},  {0, -300, 2000},    {-100, -300, 2000},
            {-200, -300, 2000}, {-300, -300, 2000}, {-400, -300, 2000},
            {-500, -300, 2000}, {-600, -300, 2000}, {-700, -300, 2000}};

        expect(detectedBlobs.size() ==
               knownPositions.size() >> fatal); // NOLINT

        std::vector<CameraFramedPosition> positions{};
        std::transform(
            detectedBlobs.begin(), detectedBlobs.end(),
            std::back_inserter(positions), [&](hpm::KeyPoint const &blob) {
              return blobToPosition(blob, meanFocalLength, imageCenter,
                                    knownMarkerDiameter);
            });

        auto constexpr EPS_JUMBO{3.0_d};
        auto constexpr EPS_PERFECT{1.0_d};
        auto jumbos{0};
        auto perfects{0};
        for (size_t i{0}; i < positions.size(); ++i) {
          if (cv::norm(positions[i] - knownPositions[i]) > EPS_JUMBO) {
            jumbos = jumbos + 1;
          }
          if (cv::norm(positions[i] - knownPositions[i]) < EPS_PERFECT) {
            perfects = perfects + 1;
          }
        }

        // Allow a maximum fraction of jumbos
        auto percentJumbos{static_cast<double>(jumbos) /
                           static_cast<double>(std::ssize(positions))};
        auto constexpr ALLOWED_JUMBOS_FRACTION{0.03_d};
        expect(percentJumbos < ALLOWED_JUMBOS_FRACTION) << "Too many jumbos";
        if (not(percentJumbos < ALLOWED_JUMBOS_FRACTION)) {
          for (size_t i{0}; i < positions.size(); ++i) {
            expect(cv::norm(positions[i] - knownPositions[i]) < EPS_JUMBO)
                << positions[i];
            expect(abs(positions[i].x - knownPositions[i].x) < EPS_JUMBO)
                << positions[i] << knownPositions[i] << " x too"
                << ((positions[i].x - knownPositions[i].x) > 0.0 ? "large"
                                                                 : "small");
            expect(abs(positions[i].y - knownPositions[i].y) < EPS_JUMBO)
                << positions[i] << knownPositions[i] << " y too"
                << ((positions[i].y - knownPositions[i].y) > 0.0 ? "large"
                                                                 : "small");
            expect(abs(positions[i].z - knownPositions[i].z) < EPS_JUMBO)
                << positions[i] << knownPositions[i] << " z too"
                << ((positions[i].z - knownPositions[i].z) > 0.0 ? "large"
                                                                 : "small");
          }
        }

        // Require some fraction of perfects
        auto percentPerfects{static_cast<double>(perfects) /
                             static_cast<double>(std::ssize(positions))};
        auto constexpr EXPECTED_PERFECTS_FRACTION{0.76_d};
        expect(percentPerfects >= EXPECTED_PERFECTS_FRACTION)
            << "Not enough perfects";
        if (not(percentPerfects >= EXPECTED_PERFECTS_FRACTION)) {
          for (size_t i{0}; i < positions.size(); ++i) {
            expect(cv::norm(positions[i] - knownPositions[i]) < EPS_PERFECT)
                << positions[i];
            expect(abs(positions[i].x - knownPositions[i].x) < EPS_PERFECT)
                << positions[i] << knownPositions[i] << " x too"
                << ((positions[i].x - knownPositions[i].x) > 0.0 ? "large"
                                                                 : "small");
            expect(abs(positions[i].y - knownPositions[i].y) < EPS_PERFECT)
                << positions[i] << knownPositions[i] << " y too"
                << ((positions[i].y - knownPositions[i].y) > 0.0 ? "large"
                                                                 : "small");
            expect(abs(positions[i].z - knownPositions[i].z) < EPS_PERFECT)
                << positions[i] << knownPositions[i] << " z too"
                << ((positions[i].z - knownPositions[i].z) > 0.0 ? "large"
                                                                 : "small");
          }
        }
      };

  std::vector<hpm::KeyPoint> const detectedRedBlobs{
      {{14769.3, 7066.97}, 335.594}, {{13756.4, 7066.96}, 333.101},
      {{12743.6, 7066.98}, 330.987}, {{11730.8, 7066.99}, 329.263},
      {{10718.0, 7066.96}, 328.151}, {{9705.1, 7066.96}, 326.976},
      {{8692.33, 7066.97}, 326.154}, {{7679.51, 7066.98}, 326.054},
      {{6666.69, 7066.95}, 326.215}, {{5653.84, 7066.97}, 326.878},
      {{4641.02, 7066.98}, 328.159}, {{3628.18, 7066.96}, 329.301},
      {{2615.4, 7066.98}, 330.733},  {{1602.57, 7066.97}, 332.916},
      {{589.769, 7066.98}, 335.57},  {{14769.3, 6054.14}, 334.173},
      {{13756.4, 6054.13}, 331.827}, {{12743.6, 6054.12}, 329.795},
      {{11730.8, 6054.13}, 328.249}, {{10718.0, 6054.11}, 327.024},
      {{9705.12, 6054.12}, 326.039}, {{8692.35, 6054.15}, 325.224},
      {{7679.5, 6054.15}, 324.948},  {{6666.66, 6054.16}, 325.227},
      {{5653.86, 6054.12}, 325.895}, {{4641.02, 6054.13}, 327.016},
      {{3628.21, 6054.13}, 328.311}, {{2615.39, 6054.13}, 329.947},
      {{1602.58, 6054.14}, 332.077}, {{589.748, 6054.13}, 334.238},
      {{14769.3, 5041.33}, 333.348}, {{13756.4, 5041.32}, 331.103},
      {{12743.6, 5041.33}, 329.108}, {{11730.8, 5041.29}, 327.573},
      {{10718.0, 5041.31}, 326.161}, {{9705.15, 5041.34}, 325.233},
      {{8692.32, 5041.32}, 324.64},  {{7679.5, 5041.31}, 324.428},
      {{6666.69, 5041.32}, 324.612}, {{5653.82, 5041.34}, 325.181},
      {{4641.06, 5041.31}, 326.15},  {{3628.19, 5041.34}, 327.62},
      {{2615.38, 5041.33}, 329.217}, {{1602.56, 5041.31}, 331.397},
      {{589.757, 5041.32}, 333.604}, {{14769.3, 4028.5}, 333.433},
      {{13756.4, 4028.5}, 331.048},  {{12743.6, 4028.5}, 328.428},
      {{11730.8, 4028.5}, 327.342},  {{10718.0, 4028.5}, 326.009},
      {{9705.17, 4028.5}, 324.975},  {{8692.29, 4028.5}, 324.428},
      {{7679.5, 4028.5}, 324.306},   {{6666.67, 4028.5}, 324.424},
      {{5653.82, 4028.5}, 324.978},  {{4641.05, 4028.5}, 326.063},
      {{3628.2, 4028.5}, 327.157},   {{2615.36, 4028.5}, 328.975},
      {{1602.56, 4028.5}, 331.031},  {{589.742, 4028.5}, 333.435},
      {{14769.3, 3015.67}, 333.348}, {{13756.4, 3015.68}, 331.103},
      {{12743.6, 3015.67}, 329.108}, {{11730.8, 3015.71}, 327.573},
      {{10718.0, 3015.69}, 326.161}, {{9705.15, 3015.66}, 325.233},
      {{8692.32, 3015.68}, 324.64},  {{7679.5, 3015.69}, 324.428},
      {{6666.69, 3015.68}, 324.612}, {{5653.82, 3015.66}, 325.181},
      {{4641.06, 3015.69}, 326.15},  {{3628.19, 3015.66}, 327.62},
      {{2615.38, 3015.67}, 329.217}, {{1602.56, 3015.69}, 331.397},
      {{589.757, 3015.68}, 333.604}, {{14769.3, 2002.86}, 334.173},
      {{13756.4, 2002.87}, 331.827}, {{12743.6, 2002.88}, 329.793},
      {{11730.8, 2002.87}, 328.249}, {{10718.0, 2002.89}, 327.024},
      {{9705.12, 2002.88}, 326.039}, {{8692.35, 2002.85}, 325.224},
      {{7679.5, 2002.85}, 324.948},  {{6666.66, 2002.84}, 325.227},
      {{5653.86, 2002.88}, 325.895}, {{4641.02, 2002.87}, 327.016},
      {{3628.21, 2002.87}, 328.311}, {{2615.39, 2002.87}, 329.947},
      {{1602.58, 2002.86}, 332.077}, {{589.748, 2002.87}, 334.238},
      {{14769.3, 990.028}, 335.594}, {{13756.4, 990.037}, 333.1},
      {{12743.6, 990.028}, 330.991}, {{11730.8, 990.012}, 329.264},
      {{10718.0, 990.04}, 328.151},  {{9705.1, 990.041}, 326.976},
      {{8692.33, 990.029}, 326.159}, {{7679.51, 990.026}, 326.053},
      {{6666.69, 990.046}, 326.215}, {{5653.84, 990.034}, 326.878},
      {{4641.02, 990.023}, 328.159}, {{3628.18, 990.037}, 329.301},
      {{2615.39, 990.025}, 330.735}, {{1602.57, 990.037}, 332.911},
      {{589.769, 990.02}, 335.57}};

  std::vector<hpm::KeyPoint> const detectedGreenBlobs{
      {{14769.3, 7066.97}, 335.594}, {{13756.4, 7066.96}, 333.101},
      {{12743.6, 7066.98}, 330.987}, {{11730.8, 7066.99}, 329.263},
      {{10718.0, 7066.96}, 328.151}, {{9705.1, 7066.96}, 326.976},
      {{8692.33, 7066.97}, 326.154}, {{7679.51, 7066.98}, 326.054},
      {{6666.69, 7066.95}, 326.215}, {{5653.84, 7066.97}, 326.878},
      {{4641.02, 7066.98}, 328.159}, {{3628.18, 7066.96}, 329.301},
      {{2615.4, 7066.98}, 330.733},  {{1602.57, 7066.97}, 332.916},
      {{589.769, 7066.98}, 335.57},  {{14769.3, 6054.14}, 334.173},
      {{13756.4, 6054.13}, 331.827}, {{12743.6, 6054.12}, 329.795},
      {{11730.8, 6054.13}, 328.249}, {{10718.0, 6054.11}, 327.024},
      {{9705.12, 6054.12}, 326.039}, {{8692.35, 6054.15}, 325.224},
      {{7679.5, 6054.15}, 324.948},  {{6666.66, 6054.16}, 325.227},
      {{5653.86, 6054.12}, 325.895}, {{4641.02, 6054.13}, 327.016},
      {{3628.21, 6054.13}, 328.311}, {{2615.39, 6054.13}, 329.947},
      {{1602.58, 6054.14}, 332.077}, {{589.748, 6054.13}, 334.238},
      {{14769.3, 5041.33}, 333.348}, {{13756.4, 5041.32}, 331.103},
      {{12743.6, 5041.33}, 329.108}, {{11730.8, 5041.29}, 327.573},
      {{10718.0, 5041.31}, 326.161}, {{9705.15, 5041.34}, 325.233},
      {{8692.32, 5041.32}, 324.64},  {{7679.5, 5041.31}, 324.428},
      {{6666.69, 5041.32}, 324.612}, {{5653.82, 5041.34}, 325.181},
      {{4641.06, 5041.31}, 326.15},  {{3628.19, 5041.34}, 327.62},
      {{2615.38, 5041.33}, 329.217}, {{1602.56, 5041.31}, 331.397},
      {{589.757, 5041.32}, 333.604}, {{14769.3, 4028.5}, 333.433},
      {{13756.4, 4028.5}, 331.048},  {{12743.6, 4028.5}, 328.428},
      {{11730.8, 4028.5}, 327.342},  {{10718.0, 4028.5}, 326.009},
      {{9705.17, 4028.5}, 324.975},  {{8692.29, 4028.5}, 324.428},
      {{7679.5, 4028.5}, 324.306},   {{6666.67, 4028.5}, 324.424},
      {{5653.82, 4028.5}, 324.978},  {{4641.05, 4028.5}, 326.063},
      {{3628.2, 4028.5}, 327.157},   {{2615.36, 4028.5}, 328.975},
      {{1602.56, 4028.5}, 331.031},  {{589.742, 4028.5}, 333.435},
      {{14769.3, 3015.67}, 333.348}, {{13756.4, 3015.68}, 331.103},
      {{12743.6, 3015.67}, 329.108}, {{11730.8, 3015.71}, 327.573},
      {{10718.0, 3015.69}, 326.161}, {{9705.15, 3015.66}, 325.233},
      {{8692.32, 3015.68}, 324.64},  {{7679.5, 3015.69}, 324.428},
      {{6666.69, 3015.68}, 324.612}, {{5653.82, 3015.66}, 325.181},
      {{4641.06, 3015.69}, 326.15},  {{3628.19, 3015.66}, 327.62},
      {{2615.38, 3015.67}, 329.217}, {{1602.56, 3015.69}, 331.397},
      {{589.757, 3015.68}, 333.604}, {{14769.3, 2002.86}, 334.173},
      {{13756.4, 2002.87}, 331.827}, {{12743.6, 2002.88}, 329.793},
      {{11730.8, 2002.87}, 328.249}, {{10718.0, 2002.89}, 327.024},
      {{9705.12, 2002.88}, 326.039}, {{8692.35, 2002.85}, 325.224},
      {{7679.5, 2002.85}, 324.948},  {{6666.66, 2002.84}, 325.227},
      {{5653.86, 2002.88}, 325.895}, {{4641.02, 2002.87}, 327.016},
      {{3628.21, 2002.87}, 328.311}, {{2615.39, 2002.87}, 329.947},
      {{1602.58, 2002.86}, 332.077}, {{589.748, 2002.87}, 334.238},
      {{14769.3, 990.028}, 335.594}, {{13756.4, 990.037}, 333.1},
      {{12743.6, 990.028}, 330.991}, {{11730.8, 990.012}, 329.264},
      {{10718.0, 990.04}, 328.151},  {{9705.1, 990.041}, 326.976},
      {{8692.33, 990.029}, 326.159}, {{7679.51, 990.026}, 326.053},
      {{6666.69, 990.046}, 326.215}, {{5653.84, 990.034}, 326.878},
      {{4641.02, 990.023}, 328.159}, {{3628.18, 990.037}, 329.301},
      {{2615.39, 990.025}, 330.735}, {{1602.57, 990.037}, 332.911},
      {{589.769, 990.02}, 335.57}};
  std::vector<hpm::KeyPoint> const detectedBlueBlobs{
      {{14769.3, 7066.97}, 335.594}, {{13756.4, 7066.96}, 333.101},
      {{12743.6, 7066.98}, 330.987}, {{11730.8, 7066.99}, 329.263},
      {{10718.0, 7066.96}, 328.151}, {{9705.1, 7066.96}, 326.976},
      {{8692.33, 7066.97}, 326.154}, {{7679.51, 7066.98}, 326.054},
      {{6666.69, 7066.95}, 326.215}, {{5653.84, 7066.97}, 326.878},
      {{4641.02, 7066.98}, 328.159}, {{3628.18, 7066.96}, 329.301},
      {{2615.4, 7066.98}, 330.733},  {{1602.57, 7066.97}, 332.916},
      {{589.769, 7066.98}, 335.57},  {{14769.3, 6054.14}, 334.173},
      {{13756.4, 6054.13}, 331.827}, {{12743.6, 6054.12}, 329.795},
      {{11730.8, 6054.13}, 328.249}, {{10718.0, 6054.11}, 327.024},
      {{9705.12, 6054.12}, 326.039}, {{8692.35, 6054.15}, 325.224},
      {{7679.5, 6054.15}, 324.948},  {{6666.66, 6054.16}, 325.227},
      {{5653.86, 6054.12}, 325.895}, {{4641.02, 6054.13}, 327.016},
      {{3628.21, 6054.13}, 328.311}, {{2615.39, 6054.13}, 329.947},
      {{1602.58, 6054.14}, 332.077}, {{589.748, 6054.13}, 334.238},
      {{14769.3, 5041.33}, 333.348}, {{13756.4, 5041.32}, 331.103},
      {{12743.6, 5041.33}, 329.108}, {{11730.8, 5041.29}, 327.573},
      {{10718.0, 5041.31}, 326.161}, {{9705.15, 5041.34}, 325.233},
      {{8692.32, 5041.32}, 324.64},  {{7679.5, 5041.31}, 324.428},
      {{6666.69, 5041.32}, 324.612}, {{5653.82, 5041.34}, 325.181},
      {{4641.06, 5041.31}, 326.15},  {{3628.19, 5041.34}, 327.62},
      {{2615.38, 5041.33}, 329.217}, {{1602.56, 5041.31}, 331.397},
      {{589.757, 5041.32}, 333.604}, {{14769.3, 4028.5}, 333.433},
      {{13756.4, 4028.5}, 331.048},  {{12743.6, 4028.5}, 328.428},
      {{11730.8, 4028.5}, 327.342},  {{10718.0, 4028.5}, 326.009},
      {{9705.17, 4028.5}, 324.975},  {{8692.29, 4028.5}, 324.428},
      {{7679.5, 4028.5}, 324.306},   {{6666.67, 4028.5}, 324.424},
      {{5653.82, 4028.5}, 324.978},  {{4641.05, 4028.5}, 326.063},
      {{3628.2, 4028.5}, 327.157},   {{2615.36, 4028.5}, 328.975},
      {{1602.56, 4028.5}, 331.031},  {{589.742, 4028.5}, 333.435},
      {{14769.3, 3015.67}, 333.348}, {{13756.4, 3015.68}, 331.103},
      {{12743.6, 3015.67}, 329.108}, {{11730.8, 3015.71}, 327.573},
      {{10718.0, 3015.69}, 326.161}, {{9705.15, 3015.66}, 325.233},
      {{8692.32, 3015.68}, 324.64},  {{7679.5, 3015.69}, 324.428},
      {{6666.69, 3015.68}, 324.612}, {{5653.82, 3015.66}, 325.181},
      {{4641.06, 3015.69}, 326.15},  {{3628.19, 3015.66}, 327.62},
      {{2615.38, 3015.67}, 329.217}, {{1602.56, 3015.69}, 331.397},
      {{589.757, 3015.68}, 333.604}, {{14769.3, 2002.86}, 334.173},
      {{13756.4, 2002.87}, 331.827}, {{12743.6, 2002.88}, 329.793},
      {{11730.8, 2002.87}, 328.249}, {{10718.0, 2002.89}, 327.024},
      {{9705.12, 2002.88}, 326.039}, {{8692.35, 2002.85}, 325.224},
      {{7679.5, 2002.85}, 324.948},  {{6666.66, 2002.84}, 325.227},
      {{5653.86, 2002.88}, 325.895}, {{4641.02, 2002.87}, 327.016},
      {{3628.21, 2002.87}, 328.311}, {{2615.39, 2002.87}, 329.947},
      {{1602.58, 2002.86}, 332.077}, {{589.748, 2002.87}, 334.238},
      {{14769.3, 990.028}, 335.594}, {{13756.4, 990.037}, 333.1},
      {{12743.6, 990.028}, 330.991}, {{11730.8, 990.012}, 329.264},
      {{10718.0, 990.04}, 328.151},  {{9705.1, 990.041}, 326.976},
      {{8692.33, 990.029}, 326.159}, {{7679.51, 990.026}, 326.053},
      {{6666.69, 990.046}, 326.215}, {{5653.84, 990.034}, 326.878},
      {{4641.02, 990.023}, 328.159}, {{3628.18, 990.037}, 329.301},
      {{2615.39, 990.025}, 330.735}, {{1602.57, 990.037}, 332.911},
      {{589.769, 990.02}, 335.57}};

  "interpretation simpleBlobDetector's results on grid-red-2000.png"_test =
      [&interpret6xOpenScad, &detectedRedBlobs] {
        interpret6xOpenScad(detectedRedBlobs);
      };

  "interpretation simpleBlobDetector's results on grid-green-2000.png"_test =
      [&interpret6xOpenScad, &detectedGreenBlobs] {
        interpret6xOpenScad(detectedGreenBlobs);
      };

  "interpretation simpleBlobDetector's results on grid-blue-2000.png"_test =
      [&interpret6xOpenScad, &detectedBlueBlobs] {
        interpret6xOpenScad(detectedBlueBlobs);
      };

  "slightly challenging image"_test = [] {
    std::string const imageFileName{
        hpm::getPath("test-images/"
                     "generated_benchmark_nr5_32_0_0_0_0_0_0_1000_45rotX.png")};
    cv::Mat const image = cv::imread(imageFileName, cv::IMREAD_COLOR);
    expect((not image.empty()) >> fatal);
    auto const result{blobDetect(image)};
    expect(result.size() == 6_ul);
  };
}
